class Solution {
public:
    // Function to convert a Roman numeral string to an integer
    int romanToInt(string s) {
        // Step 1: Create a map to store the Roman numeral values
        unordered_map<char, int> mp;
        mp['I'] = 1;
        mp['V'] = 5;
        mp['X'] = 10;
        mp['L'] = 50;
        mp['C'] = 100;
        mp['D'] = 500;
        mp['M'] = 1000;

        // Step 2: Initialize the result variable to store the final integer
        int ans = 0;

        // Step 3: Iterate through the Roman numeral string
        for (int i = 0; i < s.length(); i++) {
            // Step 4: If the current character represents a smaller value than the next one,
            // subtract the current value from the next (e.g., IV -> 5 - 1 = 4)
            if (i + 1 < s.length() && mp[s[i]] < mp[s[i + 1]]) {
                ans += mp[s[i + 1]] - mp[s[i]];
                i++;  // Skip the next character as it's already processed
            }
            // Step 5: Otherwise, just add the value of the current character
            else {
                ans += mp[s[i]];
            }
        }

        // Step 6: Return the final integer value
        return ans;
    }
};
